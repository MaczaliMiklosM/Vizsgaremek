package com.example.demo.controller;

import com.example.demo.dto.product.ProductRead;
import com.example.demo.model.Product;
import com.example.demo.dto.product.ProductSave;
import com.example.demo.services.ProductService;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.Base64;
import java.util.List;

@RestController
@RequestMapping("/products")
@Tag(name = "Product controller")
public class ProductController {

    @Autowired
    ProductService productService;

    /**
     * √öj term√©k l√©trehoz√°sa multipart/form-data form√°tumban
     *
     * @param productSave a felt√∂lt√∂tt term√©k adatokat tartalmaz√≥ DTO
     * @return v√°lasz, hogy sikeres volt-e a ment√©s
     */
    @PostMapping(value = "/createProduct", consumes = "multipart/form-data")
    public ResponseEntity<String> createProduct(@ModelAttribute ProductSave productSave) {
        Product product = productService.createProduct(productSave);
        if (product != null) {
            return new ResponseEntity<>("Product successfully saved", HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>("Something happened", HttpStatus.CONFLICT);
        }
    }

    /**
     * √ñsszes term√©k lek√©rdez√©se (minden st√°tusz)
     *
     * @return term√©klista
     */
    @GetMapping("/getProducts")
    public List<Product> getProducts(){
        return productService.getProducts();
    }

    /**
     * Egy konkr√©t term√©k lek√©rdez√©se ID alapj√°n (base64-es k√©pekkel)
     *
     * @param id a keresett term√©k azonos√≠t√≥ja
     * @return a term√©k DTO-ja vagy 404 ha nem tal√°lhat√≥
     */
    @GetMapping("/getProductById/{id}")
    public ResponseEntity<ProductRead> getProductById(@PathVariable Integer id) {
        Product product = productService.getProduct(id);
        if (product == null) return ResponseEntity.notFound().build();

        ProductRead dto = new ProductRead(
                product.getId(),
                product.getName(),
                product.getDescription(),
                product.getPrice(),
                product.getBrand(),
                product.getColor(),
                product.getSize(),
                product.getProductCondition(),
                product.getCategory(),
                product.getTargetGender(),
                product.getStatus(),
                product.getImageData() != null ? Base64.getEncoder().encodeToString(product.getImageData()) : null,
                product.getImageData2() != null ? Base64.getEncoder().encodeToString(product.getImageData2()) : null,
                product.getImageData3() != null ? Base64.getEncoder().encodeToString(product.getImageData3()) : null,
                product.getUser() != null ? product.getUser().getId() : null
        );

        return ResponseEntity.ok(dto);
    }

    /**
     * Egy term√©k t√∂rl√©se (csak admin jogosults√°ggal)
     *
     * @param id a t√∂rlend≈ë term√©k azonos√≠t√≥ja
     * @return v√°lasz√ºzenet a t√∂rl√©s eredm√©ny√©r≈ël
     */
    @PreAuthorize("hasAnyAuthority('ADMIN')")
    @DeleteMapping("/deleteProduct/{id}")
    public ResponseEntity<String> deleteProduct(@PathVariable Integer id){
        return productService.deleteProduct(id);
    }

    /**
     * Term√©k j√≥v√°hagy√°sa (csak admin joggal)
     *
     * @param id a j√≥v√°hagyand√≥ term√©k azonos√≠t√≥ja
     * @return sikeres vagy hiba v√°lasz
     */
    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping("/approveProduct/{id}")
    public ResponseEntity<String> approveProduct(@PathVariable Integer id) {
        try {
            productService.approveProduct(id); // üëà kiszervezve a service-be
            return new ResponseEntity<>("Product approved successfully", HttpStatus.OK);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    /**
     * Egy adott felhaszn√°l√≥ √°ltal felt√∂lt√∂tt term√©kek lek√©rdez√©se
     *
     * @param userId a felt√∂lt≈ë felhaszn√°l√≥ azonos√≠t√≥ja
     * @return term√©klista
     */
    @GetMapping("/by-user/{userId}")
    @PreAuthorize("hasAnyAuthority('USER', 'ADMIN')")
    public List<Product> getProductsByUserId(@PathVariable Integer userId) {
        return productService.getProductsByUserId(userId);
    }

}
